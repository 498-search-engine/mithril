---
Checks: >
  -*,
  bugprone-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -bugprone-easily-swappable-parameters,
  -modernize-use-trailing-return-type,
  -performance-avoid-endl,
  -readability-else-after-return,
  -readability-identifier-length,
  -readability-implicit-bool-conversion,
  -readability-magic-numbers,
  -readability-function-cognitive-complexity,
  -modernize-use-nodiscard,
  performance-for-range-copy,
  bugprone-use-after-move,
  cppcoreguidelines-pro-type-member-init

# https://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-naming.html
CheckOptions:
  # Namespace and class-level constructs
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }

  # Function naming
  - { key: readability-identifier-naming.FunctionCase,           value: CamelCase  }
  - { key: readability-identifier-naming.GlobalFunctionCase,     value: CamelCase  }

  # Variables and members
  - { key: readability-identifier-naming.VariableCase,           value: camelBack  }
  - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack  }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }

  # Constants and enums
  - { key: readability-identifier-naming.ConstexprVariableCase,  value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,       value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantCase,     value: CamelCase  }
  - { key: readability-identifier-naming.GlobalVariableCase,     value: CamelCase  }
  - { key: readability-identifier-naming.MemberConstantCase,     value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantCase,     value: CamelCase  }

  # Preprocessor
  - { key: readability-identifier-naming.MacroDefinitionCase,    value: UPPER_CASE }

  # Ignores
  - { key: readability-identifier-naming.FunctionIgnoredRegexp,  value: '^(begin|end|cbegin|cend)$' }
